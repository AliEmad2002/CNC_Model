
DVD_CNC_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000f84  00001018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000061  00800076  00800076  0000102e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000102e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002984  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cbe  00000000  00000000  00003ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000146d  00000000  00000000  0000499e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a68  00000000  00000000  00005e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012b3  00000000  00000000  00006874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021e3  00000000  00000000  00007b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00009d0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__vector_3>
  10:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__vector_4>
  14:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__vector_5>
  18:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__vector_6>
  1c:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_7>
  20:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_8>
  24:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_9>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__vector_19>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	95 04       	cpc	r9, r5
  56:	a6 04       	cpc	r10, r6
  58:	b7 04       	cpc	r11, r7
  5a:	c8 04       	cpc	r12, r8
  5c:	d9 04       	cpc	r13, r9
  5e:	ea 04       	cpc	r14, r10
  60:	fb 04       	cpc	r15, r11
  62:	0c 05       	cpc	r16, r12

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d4 e0       	ldi	r29, 0x04	; 4
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e4 e8       	ldi	r30, 0x84	; 132
  78:	ff e0       	ldi	r31, 0x0F	; 15
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a6 e7       	ldi	r26, 0x76	; 118
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a7 3d       	cpi	r26, 0xD7	; 215
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  9a:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <MCLOCK_u32GetSystemClock>:
		__asm__ volatile("NOP");
}

u32 MCLOCK_u32GetSystemClock(void){
	return CLOCK_SYSTEM_FREQUENCY;
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	72 e1       	ldi	r23, 0x12	; 18
  a6:	8a e7       	ldi	r24, 0x7A	; 122
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	08 95       	ret

000000ac <zero_x_axis>:



void zero_x_axis(void)
{
	x_step = 0 ;
  ac:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <x_step>
  b0:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <x_step+0x1>
  b4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <x_step+0x2>
  b8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <x_step+0x3>
	while(1)
	{
		HStepper_step(&stepperx, -1) ;
  bc:	6f ef       	ldi	r22, 0xFF	; 255
  be:	7f ef       	ldi	r23, 0xFF	; 255
  c0:	88 ea       	ldi	r24, 0xA8	; 168
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HStepper_step>
		if (digital_read(_x_limit_switch) == 0)
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 51 03 	call	0x6a2	; 0x6a2 <digital_read>
  ce:	81 11       	cpse	r24, r1
  d0:	f5 cf       	rjmp	.-22     	; 0xbc <zero_x_axis+0x10>
			return ;
	}
}
  d2:	08 95       	ret

000000d4 <zero_y_axis>:

void zero_y_axis(void)
{
	y_step = 0 ;
  d4:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <y_step>
  d8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <y_step+0x1>
  dc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <y_step+0x2>
  e0:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <y_step+0x3>
	while(1)
	{
		HStepper_step(&steppery, 1) ;
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	85 e9       	ldi	r24, 0x95	; 149
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HStepper_step>
		if (digital_read(_y_limit_switch) == 0)
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <digital_read>
  f6:	81 11       	cpse	r24, r1
  f8:	f5 cf       	rjmp	.-22     	; 0xe4 <zero_y_axis+0x10>
			return ;
	}
}
  fa:	08 95       	ret

000000fc <zero_z_axis>:

void zero_z_axis(void)
{
	z_step = 0 ;
  fc:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__data_end>
 100:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <__data_end+0x1>
 104:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end+0x2>
 108:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__data_end+0x3>
	while(1)
	{
		HStepper_step(&stepperz, -1) ;
 10c:	6f ef       	ldi	r22, 0xFF	; 255
 10e:	7f ef       	ldi	r23, 0xFF	; 255
 110:	82 e8       	ldi	r24, 0x82	; 130
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HStepper_step>
		if (digital_read(_z_limit_switch) == 0)
 118:	83 eb       	ldi	r24, 0xB3	; 179
 11a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <digital_read>
 11e:	81 11       	cpse	r24, r1
 120:	f5 cf       	rjmp	.-22     	; 0x10c <zero_z_axis+0x10>
			return ;
	}
}
 122:	08 95       	ret

00000124 <maximize_z_axis>:

void maximize_z_axis(void)
{
	for (z_step=z_step; z_step<_z_axis_head_up_pos; z_step++)
 124:	19 c0       	rjmp	.+50     	; 0x158 <maximize_z_axis+0x34>
		HStepper_step(&stepperz, 1) ;
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	82 e8       	ldi	r24, 0x82	; 130
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HStepper_step>
	}
}

void maximize_z_axis(void)
{
	for (z_step=z_step; z_step<_z_axis_head_up_pos; z_step++)
 132:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 136:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 13a:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__data_end+0x2>
 13e:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <__data_end+0x3>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	a1 1d       	adc	r26, r1
 146:	b1 1d       	adc	r27, r1
 148:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 14c:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
 150:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <__data_end+0x2>
 154:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <__data_end+0x3>
 158:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 15c:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 160:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__data_end+0x2>
 164:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <__data_end+0x3>
 168:	84 36       	cpi	r24, 0x64	; 100
 16a:	91 05       	cpc	r25, r1
 16c:	a1 05       	cpc	r26, r1
 16e:	b1 05       	cpc	r27, r1
 170:	d4 f2       	brlt	.-76     	; 0x126 <maximize_z_axis+0x2>
		HStepper_step(&stepperz, 1) ;
 172:	08 95       	ret

00000174 <main>:
void zero_z_axis(void) ;
void maximize_z_axis(void) ;

int main(void)
{
	UART_init(_baud_rate) ;
 174:	60 e8       	ldi	r22, 0x80	; 128
 176:	75 e2       	ldi	r23, 0x25	; 37
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 81 03 	call	0x702	; 0x702 <UART_init>
	
	
	HStepper_init(&stepperz, HStepper_half_step, 40, A4, A5, D5, C0, _x_limit_switch, HStepper_lim_switch_pull_DOWN) ;
 180:	81 2c       	mov	r8, r1
 182:	a1 2c       	mov	r10, r1
 184:	0f 2e       	mov	r0, r31
 186:	f0 ec       	ldi	r31, 0xC0	; 192
 188:	cf 2e       	mov	r12, r31
 18a:	f0 2d       	mov	r31, r0
 18c:	0f 2e       	mov	r0, r31
 18e:	f5 ed       	ldi	r31, 0xD5	; 213
 190:	ef 2e       	mov	r14, r31
 192:	f0 2d       	mov	r31, r0
 194:	05 ea       	ldi	r16, 0xA5	; 165
 196:	24 ea       	ldi	r18, 0xA4	; 164
 198:	48 e2       	ldi	r20, 0x28	; 40
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	68 e0       	ldi	r22, 0x08	; 8
 19e:	82 e8       	ldi	r24, 0x82	; 130
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 b7 03 	call	0x76e	; 0x76e <HStepper_init>
	HStepper_init(&steppery, HStepper_half_step, 40, A0, A1, D7, D2, _y_limit_switch, HStepper_lim_switch_pull_DOWN) ;
 1a6:	0f 2e       	mov	r0, r31
 1a8:	f2 ed       	ldi	r31, 0xD2	; 210
 1aa:	cf 2e       	mov	r12, r31
 1ac:	f0 2d       	mov	r31, r0
 1ae:	0f 2e       	mov	r0, r31
 1b0:	f7 ed       	ldi	r31, 0xD7	; 215
 1b2:	ef 2e       	mov	r14, r31
 1b4:	f0 2d       	mov	r31, r0
 1b6:	01 ea       	ldi	r16, 0xA1	; 161
 1b8:	20 ea       	ldi	r18, 0xA0	; 160
 1ba:	48 e2       	ldi	r20, 0x28	; 40
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	68 e0       	ldi	r22, 0x08	; 8
 1c0:	85 e9       	ldi	r24, 0x95	; 149
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 b7 03 	call	0x76e	; 0x76e <HStepper_init>
	HStepper_init(&stepperx, HStepper_half_step, 40, A3, A2, D3, D4, _z_limit_switch, HStepper_lim_switch_pull_DOWN) ;
 1c8:	0f 2e       	mov	r0, r31
 1ca:	f3 eb       	ldi	r31, 0xB3	; 179
 1cc:	af 2e       	mov	r10, r31
 1ce:	f0 2d       	mov	r31, r0
 1d0:	0f 2e       	mov	r0, r31
 1d2:	f4 ed       	ldi	r31, 0xD4	; 212
 1d4:	cf 2e       	mov	r12, r31
 1d6:	f0 2d       	mov	r31, r0
 1d8:	0f 2e       	mov	r0, r31
 1da:	f3 ed       	ldi	r31, 0xD3	; 211
 1dc:	ef 2e       	mov	r14, r31
 1de:	f0 2d       	mov	r31, r0
 1e0:	02 ea       	ldi	r16, 0xA2	; 162
 1e2:	23 ea       	ldi	r18, 0xA3	; 163
 1e4:	48 e2       	ldi	r20, 0x28	; 40
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	68 e0       	ldi	r22, 0x08	; 8
 1ea:	88 ea       	ldi	r24, 0xA8	; 168
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 b7 03 	call	0x76e	; 0x76e <HStepper_init>
	
	HStepper_set_speed(&stepperx, 200) ;
 1f2:	68 ec       	ldi	r22, 0xC8	; 200
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	88 ea       	ldi	r24, 0xA8	; 168
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 fd 03 	call	0x7fa	; 0x7fa <HStepper_set_speed>
	HStepper_set_speed(&steppery, 200) ;
 1fe:	68 ec       	ldi	r22, 0xC8	; 200
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	85 e9       	ldi	r24, 0x95	; 149
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 fd 03 	call	0x7fa	; 0x7fa <HStepper_set_speed>
	HStepper_set_speed(&stepperz, 200) ;
 20a:	68 ec       	ldi	r22, 0xC8	; 200
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	82 e8       	ldi	r24, 0x82	; 130
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 fd 03 	call	0x7fa	; 0x7fa <HStepper_set_speed>
	
	
	zero_x_axis() ;
 216:	0e 94 56 00 	call	0xac	; 0xac <zero_x_axis>
	zero_y_axis() ;
 21a:	0e 94 6a 00 	call	0xd4	; 0xd4 <zero_y_axis>
	zero_z_axis() ;
 21e:	0e 94 7e 00 	call	0xfc	; 0xfc <zero_z_axis>
	
	
	while(1)
	{
		char cmd = UART_RxChar() ;
 222:	0e 94 af 03 	call	0x75e	; 0x75e <UART_RxChar>
 226:	c8 2f       	mov	r28, r24
		if (cmd == 'X')
 228:	88 35       	cpi	r24, 0x58	; 88
 22a:	f1 f5       	brne	.+124    	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
		{
			x_step++;
 22c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <x_step>
 230:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <x_step+0x1>
 234:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <x_step+0x2>
 238:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <x_step+0x3>
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	a1 1d       	adc	r26, r1
 240:	b1 1d       	adc	r27, r1
 242:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <x_step>
 246:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <x_step+0x1>
 24a:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <x_step+0x2>
 24e:	b0 93 81 00 	sts	0x0081, r27	; 0x800081 <x_step+0x3>
			if(x_step > x_step_max)
 252:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <x_step_max>
 256:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <x_step_max+0x1>
 25a:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <x_step_max+0x2>
 25e:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <x_step_max+0x3>
 262:	48 17       	cp	r20, r24
 264:	59 07       	cpc	r21, r25
 266:	6a 07       	cpc	r22, r26
 268:	7b 07       	cpc	r23, r27
 26a:	bc f4       	brge	.+46     	; 0x29a <__EEPROM_REGION_LENGTH__+0x9a>
			{
				UART_TxChar('E') ;
 26c:	85 e4       	ldi	r24, 0x45	; 69
 26e:	0e 94 b3 03 	call	0x766	; 0x766 <UART_TxChar>
				x_step-- ;
 272:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <x_step>
 276:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <x_step+0x1>
 27a:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <x_step+0x2>
 27e:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <x_step+0x3>
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	a1 09       	sbc	r26, r1
 286:	b1 09       	sbc	r27, r1
 288:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <x_step>
 28c:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <x_step+0x1>
 290:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <x_step+0x2>
 294:	b0 93 81 00 	sts	0x0081, r27	; 0x800081 <x_step+0x3>
				continue ;
 298:	c4 cf       	rjmp	.-120    	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
			}
			HStepper_step(&stepperx, 1) ;
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	88 ea       	ldi	r24, 0xA8	; 168
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HStepper_step>
 2a6:	64 c1       	rjmp	.+712    	; 0x570 <__stack+0x111>
		}
		else if (cmd == 'x')
 2a8:	88 37       	cpi	r24, 0x78	; 120
 2aa:	99 f5       	brne	.+102    	; 0x312 <__EEPROM_REGION_LENGTH__+0x112>
		{
			x_step-- ;
 2ac:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <x_step>
 2b0:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <x_step+0x1>
 2b4:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <x_step+0x2>
 2b8:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <x_step+0x3>
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	a1 09       	sbc	r26, r1
 2c0:	b1 09       	sbc	r27, r1
 2c2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <x_step>
 2c6:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <x_step+0x1>
 2ca:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <x_step+0x2>
 2ce:	b0 93 81 00 	sts	0x0081, r27	; 0x800081 <x_step+0x3>
			if(x_step < 0)
 2d2:	bb 23       	and	r27, r27
 2d4:	bc f4       	brge	.+46     	; 0x304 <__EEPROM_REGION_LENGTH__+0x104>
			{
				UART_TxChar('E') ;
 2d6:	85 e4       	ldi	r24, 0x45	; 69
 2d8:	0e 94 b3 03 	call	0x766	; 0x766 <UART_TxChar>
				x_step++ ;
 2dc:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <x_step>
 2e0:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <x_step+0x1>
 2e4:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <x_step+0x2>
 2e8:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <x_step+0x3>
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	a1 1d       	adc	r26, r1
 2f0:	b1 1d       	adc	r27, r1
 2f2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <x_step>
 2f6:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <x_step+0x1>
 2fa:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <x_step+0x2>
 2fe:	b0 93 81 00 	sts	0x0081, r27	; 0x800081 <x_step+0x3>
				continue ;
 302:	8f cf       	rjmp	.-226    	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
			}
			HStepper_step(&stepperx, -1) ;
 304:	6f ef       	ldi	r22, 0xFF	; 255
 306:	7f ef       	ldi	r23, 0xFF	; 255
 308:	88 ea       	ldi	r24, 0xA8	; 168
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HStepper_step>
 310:	2f c1       	rjmp	.+606    	; 0x570 <__stack+0x111>
		}
		else if (cmd == 'Y')
 312:	89 35       	cpi	r24, 0x59	; 89
 314:	f1 f5       	brne	.+124    	; 0x392 <__EEPROM_REGION_LENGTH__+0x192>
		{
			y_step++;
 316:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y_step>
 31a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y_step+0x1>
 31e:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <y_step+0x2>
 322:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <y_step+0x3>
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	a1 1d       	adc	r26, r1
 32a:	b1 1d       	adc	r27, r1
 32c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y_step>
 330:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y_step+0x1>
 334:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <y_step+0x2>
 338:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <y_step+0x3>
			if(y_step > y_step_max)
 33c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <y_step_max>
 340:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <y_step_max+0x1>
 344:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <y_step_max+0x2>
 348:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <y_step_max+0x3>
 34c:	48 17       	cp	r20, r24
 34e:	59 07       	cpc	r21, r25
 350:	6a 07       	cpc	r22, r26
 352:	7b 07       	cpc	r23, r27
 354:	bc f4       	brge	.+46     	; 0x384 <__EEPROM_REGION_LENGTH__+0x184>
			{
				UART_TxChar('E') ;
 356:	85 e4       	ldi	r24, 0x45	; 69
 358:	0e 94 b3 03 	call	0x766	; 0x766 <UART_TxChar>
				y_step-- ;
 35c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y_step>
 360:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y_step+0x1>
 364:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <y_step+0x2>
 368:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <y_step+0x3>
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	a1 09       	sbc	r26, r1
 370:	b1 09       	sbc	r27, r1
 372:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y_step>
 376:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y_step+0x1>
 37a:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <y_step+0x2>
 37e:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <y_step+0x3>
				continue ;
 382:	4f cf       	rjmp	.-354    	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
			}
			HStepper_step(&steppery, 1) ;
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	85 e9       	ldi	r24, 0x95	; 149
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HStepper_step>
 390:	ef c0       	rjmp	.+478    	; 0x570 <__stack+0x111>
		}
		else if (cmd == 'y')
 392:	89 37       	cpi	r24, 0x79	; 121
 394:	99 f5       	brne	.+102    	; 0x3fc <__EEPROM_REGION_LENGTH__+0x1fc>
		{
			y_step-- ;
 396:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y_step>
 39a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y_step+0x1>
 39e:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <y_step+0x2>
 3a2:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <y_step+0x3>
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	a1 09       	sbc	r26, r1
 3aa:	b1 09       	sbc	r27, r1
 3ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y_step>
 3b0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y_step+0x1>
 3b4:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <y_step+0x2>
 3b8:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <y_step+0x3>
			if(y_step < 0)
 3bc:	bb 23       	and	r27, r27
 3be:	bc f4       	brge	.+46     	; 0x3ee <__EEPROM_REGION_LENGTH__+0x1ee>
			{
				UART_TxChar('E') ;
 3c0:	85 e4       	ldi	r24, 0x45	; 69
 3c2:	0e 94 b3 03 	call	0x766	; 0x766 <UART_TxChar>
				y_step++ ;
 3c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y_step>
 3ca:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y_step+0x1>
 3ce:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <y_step+0x2>
 3d2:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <y_step+0x3>
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	a1 1d       	adc	r26, r1
 3da:	b1 1d       	adc	r27, r1
 3dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <y_step>
 3e0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <y_step+0x1>
 3e4:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <y_step+0x2>
 3e8:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <y_step+0x3>
				continue ;
 3ec:	1a cf       	rjmp	.-460    	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
			}
			HStepper_step(&steppery, -1) ;
 3ee:	6f ef       	ldi	r22, 0xFF	; 255
 3f0:	7f ef       	ldi	r23, 0xFF	; 255
 3f2:	85 e9       	ldi	r24, 0x95	; 149
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HStepper_step>
 3fa:	ba c0       	rjmp	.+372    	; 0x570 <__stack+0x111>
		}
		else if (cmd == 'Z')
 3fc:	8a 35       	cpi	r24, 0x5A	; 90
 3fe:	f1 f5       	brne	.+124    	; 0x47c <__stack+0x1d>
		{
			z_step++ ;
 400:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 404:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 408:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__data_end+0x2>
 40c:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <__data_end+0x3>
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	a1 1d       	adc	r26, r1
 414:	b1 1d       	adc	r27, r1
 416:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 41a:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
 41e:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <__data_end+0x2>
 422:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <__data_end+0x3>
			if(z_step > z_step_max)
 426:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 42a:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 42e:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 432:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 436:	48 17       	cp	r20, r24
 438:	59 07       	cpc	r21, r25
 43a:	6a 07       	cpc	r22, r26
 43c:	7b 07       	cpc	r23, r27
 43e:	bc f4       	brge	.+46     	; 0x46e <__stack+0xf>
			{
				UART_TxChar('E') ;
 440:	85 e4       	ldi	r24, 0x45	; 69
 442:	0e 94 b3 03 	call	0x766	; 0x766 <UART_TxChar>
				z_step-- ;
 446:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 44a:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 44e:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__data_end+0x2>
 452:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <__data_end+0x3>
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	a1 09       	sbc	r26, r1
 45a:	b1 09       	sbc	r27, r1
 45c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 460:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
 464:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <__data_end+0x2>
 468:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <__data_end+0x3>
				continue ;
 46c:	da ce       	rjmp	.-588    	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
			}
			HStepper_step(&stepperz, 1) ;
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	82 e8       	ldi	r24, 0x82	; 130
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HStepper_step>
 47a:	7a c0       	rjmp	.+244    	; 0x570 <__stack+0x111>
		}
		else if (cmd == 'z')
 47c:	8a 37       	cpi	r24, 0x7A	; 122
 47e:	99 f5       	brne	.+102    	; 0x4e6 <__stack+0x87>
		{
			z_step-- ;
 480:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 484:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 488:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__data_end+0x2>
 48c:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <__data_end+0x3>
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	a1 09       	sbc	r26, r1
 494:	b1 09       	sbc	r27, r1
 496:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 49a:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
 49e:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <__data_end+0x2>
 4a2:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <__data_end+0x3>
			if(z_step < 0)
 4a6:	bb 23       	and	r27, r27
 4a8:	bc f4       	brge	.+46     	; 0x4d8 <__stack+0x79>
			{
				UART_TxChar('E') ;
 4aa:	85 e4       	ldi	r24, 0x45	; 69
 4ac:	0e 94 b3 03 	call	0x766	; 0x766 <UART_TxChar>
				z_step++ ;
 4b0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 4b4:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 4b8:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__data_end+0x2>
 4bc:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <__data_end+0x3>
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	a1 1d       	adc	r26, r1
 4c4:	b1 1d       	adc	r27, r1
 4c6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end>
 4ca:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x1>
 4ce:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <__data_end+0x2>
 4d2:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <__data_end+0x3>
				continue ;
 4d6:	a5 ce       	rjmp	.-694    	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
			}
			HStepper_step(&stepperz, -1) ;
 4d8:	6f ef       	ldi	r22, 0xFF	; 255
 4da:	7f ef       	ldi	r23, 0xFF	; 255
 4dc:	82 e8       	ldi	r24, 0x82	; 130
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <HStepper_step>
 4e4:	45 c0       	rjmp	.+138    	; 0x570 <__stack+0x111>
		}
		else if (cmd == 'H')
 4e6:	88 34       	cpi	r24, 0x48	; 72
 4e8:	19 f4       	brne	.+6      	; 0x4f0 <__stack+0x91>
		{
			
			maximize_z_axis() ;
 4ea:	0e 94 92 00 	call	0x124	; 0x124 <maximize_z_axis>
 4ee:	40 c0       	rjmp	.+128    	; 0x570 <__stack+0x111>
		}
		else if (cmd == 'h')
 4f0:	88 36       	cpi	r24, 0x68	; 104
 4f2:	19 f4       	brne	.+6      	; 0x4fa <__stack+0x9b>
		{
			zero_z_axis() ;
 4f4:	0e 94 7e 00 	call	0xfc	; 0xfc <zero_z_axis>
 4f8:	3b c0       	rjmp	.+118    	; 0x570 <__stack+0x111>
				
		}
		
		else if (cmd == '0') //hard zero
 4fa:	80 33       	cpi	r24, 0x30	; 48
 4fc:	39 f4       	brne	.+14     	; 0x50c <__stack+0xad>
		{
			zero_x_axis() ;
 4fe:	0e 94 56 00 	call	0xac	; 0xac <zero_x_axis>
			zero_y_axis() ;
 502:	0e 94 6a 00 	call	0xd4	; 0xd4 <zero_y_axis>
			zero_z_axis() ;
 506:	0e 94 7e 00 	call	0xfc	; 0xfc <zero_z_axis>
 50a:	32 c0       	rjmp	.+100    	; 0x570 <__stack+0x111>
		{
			x_step = 0 ;
			y_step = 0 ;
			z_step = 0 ;
		}*/
		else if (cmd == '2') //max here!
 50c:	82 33       	cpi	r24, 0x32	; 50
 50e:	81 f5       	brne	.+96     	; 0x570 <__stack+0x111>
		{
			x_step_max = x_step ;
 510:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <x_step>
 514:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <x_step+0x1>
 518:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <x_step+0x2>
 51c:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <x_step+0x3>
 520:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <x_step_max>
 524:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <x_step_max+0x1>
 528:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <x_step_max+0x2>
 52c:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <x_step_max+0x3>
			y_step_max = y_step ;
 530:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <y_step>
 534:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <y_step+0x1>
 538:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <y_step+0x2>
 53c:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <y_step+0x3>
 540:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <y_step_max>
 544:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <y_step_max+0x1>
 548:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <y_step_max+0x2>
 54c:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <y_step_max+0x3>
			z_step_max = z_step ;
 550:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 554:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x1>
 558:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__data_end+0x2>
 55c:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <__data_end+0x3>
 560:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 564:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 568:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 56c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
				HStepper_step(&stepperx, -1) ;
			for(y_step=y_step; y_step>0; y_step--)
				HStepper_step(&steppery, -1) ;
			zero_z_axis() ;
		}*/
		UART_TxChar(cmd) ;
 570:	8c 2f       	mov	r24, r28
 572:	0e 94 b3 03 	call	0x766	; 0x766 <UART_TxChar>
 576:	55 ce       	rjmp	.-854    	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>

00000578 <init_PIN>:
 578:	99 e8       	ldi	r25, 0x89	; 137
 57a:	89 9f       	mul	r24, r25
 57c:	91 2d       	mov	r25, r1
 57e:	11 24       	eor	r1, r1
 580:	96 95       	lsr	r25
 582:	96 95       	lsr	r25
 584:	96 95       	lsr	r25
 586:	2f e0       	ldi	r18, 0x0F	; 15
 588:	92 9f       	mul	r25, r18
 58a:	a0 01       	movw	r20, r0
 58c:	11 24       	eor	r1, r1
 58e:	28 2f       	mov	r18, r24
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	2a 50       	subi	r18, 0x0A	; 10
 594:	31 09       	sbc	r19, r1
 596:	24 17       	cp	r18, r20
 598:	35 07       	cpc	r19, r21
 59a:	0c f4       	brge	.+2      	; 0x59e <init_PIN+0x26>
 59c:	91 50       	subi	r25, 0x01	; 1
 59e:	29 2f       	mov	r18, r25
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	f9 01       	movw	r30, r18
 5a4:	ee 0f       	add	r30, r30
 5a6:	ff 1f       	adc	r31, r31
 5a8:	2e 0f       	add	r18, r30
 5aa:	3f 1f       	adc	r19, r31
 5ac:	ee 27       	eor	r30, r30
 5ae:	ff 27       	eor	r31, r31
 5b0:	e2 1b       	sub	r30, r18
 5b2:	f3 0b       	sbc	r31, r19
 5b4:	e8 5a       	subi	r30, 0xA8	; 168
 5b6:	ff 4f       	sbci	r31, 0xFF	; 255
 5b8:	40 e1       	ldi	r20, 0x10	; 16
 5ba:	94 9f       	mul	r25, r20
 5bc:	80 19       	sub	r24, r0
 5be:	11 24       	eor	r1, r1
 5c0:	61 30       	cpi	r22, 0x01	; 1
 5c2:	69 f4       	brne	.+26     	; 0x5de <init_PIN+0x66>
 5c4:	21 e0       	ldi	r18, 0x01	; 1
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	a9 01       	movw	r20, r18
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <init_PIN+0x58>
 5cc:	44 0f       	add	r20, r20
 5ce:	55 1f       	adc	r21, r21
 5d0:	8a 95       	dec	r24
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <init_PIN+0x54>
 5d4:	ca 01       	movw	r24, r20
 5d6:	90 81       	ld	r25, Z
 5d8:	89 2b       	or	r24, r25
 5da:	80 83       	st	Z, r24
 5dc:	08 95       	ret
 5de:	61 11       	cpse	r22, r1
 5e0:	0d c0       	rjmp	.+26     	; 0x5fc <init_PIN+0x84>
 5e2:	21 e0       	ldi	r18, 0x01	; 1
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	a9 01       	movw	r20, r18
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <init_PIN+0x76>
 5ea:	44 0f       	add	r20, r20
 5ec:	55 1f       	adc	r21, r21
 5ee:	8a 95       	dec	r24
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <init_PIN+0x72>
 5f2:	ca 01       	movw	r24, r20
 5f4:	80 95       	com	r24
 5f6:	90 81       	ld	r25, Z
 5f8:	89 23       	and	r24, r25
 5fa:	80 83       	st	Z, r24
 5fc:	08 95       	ret

000005fe <set_PIN>:
 5fe:	99 e8       	ldi	r25, 0x89	; 137
 600:	89 9f       	mul	r24, r25
 602:	91 2d       	mov	r25, r1
 604:	11 24       	eor	r1, r1
 606:	96 95       	lsr	r25
 608:	96 95       	lsr	r25
 60a:	96 95       	lsr	r25
 60c:	2f e0       	ldi	r18, 0x0F	; 15
 60e:	92 9f       	mul	r25, r18
 610:	a0 01       	movw	r20, r0
 612:	11 24       	eor	r1, r1
 614:	28 2f       	mov	r18, r24
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	2a 50       	subi	r18, 0x0A	; 10
 61a:	31 09       	sbc	r19, r1
 61c:	24 17       	cp	r18, r20
 61e:	35 07       	cpc	r19, r21
 620:	0c f4       	brge	.+2      	; 0x624 <set_PIN+0x26>
 622:	91 50       	subi	r25, 0x01	; 1
 624:	29 2f       	mov	r18, r25
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	f9 01       	movw	r30, r18
 62a:	ee 0f       	add	r30, r30
 62c:	ff 1f       	adc	r31, r31
 62e:	2e 0f       	add	r18, r30
 630:	3f 1f       	adc	r19, r31
 632:	ee 27       	eor	r30, r30
 634:	ff 27       	eor	r31, r31
 636:	e2 1b       	sub	r30, r18
 638:	f3 0b       	sbc	r31, r19
 63a:	e7 5a       	subi	r30, 0xA7	; 167
 63c:	ff 4f       	sbci	r31, 0xFF	; 255
 63e:	40 e1       	ldi	r20, 0x10	; 16
 640:	94 9f       	mul	r25, r20
 642:	80 19       	sub	r24, r0
 644:	11 24       	eor	r1, r1
 646:	61 11       	cpse	r22, r1
 648:	0e c0       	rjmp	.+28     	; 0x666 <set_PIN+0x68>
 64a:	21 e0       	ldi	r18, 0x01	; 1
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	a9 01       	movw	r20, r18
 650:	02 c0       	rjmp	.+4      	; 0x656 <set_PIN+0x58>
 652:	44 0f       	add	r20, r20
 654:	55 1f       	adc	r21, r21
 656:	8a 95       	dec	r24
 658:	e2 f7       	brpl	.-8      	; 0x652 <set_PIN+0x54>
 65a:	ca 01       	movw	r24, r20
 65c:	80 95       	com	r24
 65e:	90 81       	ld	r25, Z
 660:	89 23       	and	r24, r25
 662:	80 83       	st	Z, r24
 664:	08 95       	ret
 666:	61 30       	cpi	r22, 0x01	; 1
 668:	69 f4       	brne	.+26     	; 0x684 <set_PIN+0x86>
 66a:	21 e0       	ldi	r18, 0x01	; 1
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	a9 01       	movw	r20, r18
 670:	02 c0       	rjmp	.+4      	; 0x676 <set_PIN+0x78>
 672:	44 0f       	add	r20, r20
 674:	55 1f       	adc	r21, r21
 676:	8a 95       	dec	r24
 678:	e2 f7       	brpl	.-8      	; 0x672 <set_PIN+0x74>
 67a:	ca 01       	movw	r24, r20
 67c:	90 81       	ld	r25, Z
 67e:	89 2b       	or	r24, r25
 680:	80 83       	st	Z, r24
 682:	08 95       	ret
 684:	62 30       	cpi	r22, 0x02	; 2
 686:	61 f4       	brne	.+24     	; 0x6a0 <set_PIN+0xa2>
 688:	21 e0       	ldi	r18, 0x01	; 1
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	a9 01       	movw	r20, r18
 68e:	02 c0       	rjmp	.+4      	; 0x694 <set_PIN+0x96>
 690:	44 0f       	add	r20, r20
 692:	55 1f       	adc	r21, r21
 694:	8a 95       	dec	r24
 696:	e2 f7       	brpl	.-8      	; 0x690 <set_PIN+0x92>
 698:	ca 01       	movw	r24, r20
 69a:	90 81       	ld	r25, Z
 69c:	89 27       	eor	r24, r25
 69e:	80 83       	st	Z, r24
 6a0:	08 95       	ret

000006a2 <digital_read>:
 6a2:	99 e8       	ldi	r25, 0x89	; 137
 6a4:	89 9f       	mul	r24, r25
 6a6:	91 2d       	mov	r25, r1
 6a8:	11 24       	eor	r1, r1
 6aa:	96 95       	lsr	r25
 6ac:	96 95       	lsr	r25
 6ae:	96 95       	lsr	r25
 6b0:	2f e0       	ldi	r18, 0x0F	; 15
 6b2:	92 9f       	mul	r25, r18
 6b4:	a0 01       	movw	r20, r0
 6b6:	11 24       	eor	r1, r1
 6b8:	28 2f       	mov	r18, r24
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	2a 50       	subi	r18, 0x0A	; 10
 6be:	31 09       	sbc	r19, r1
 6c0:	24 17       	cp	r18, r20
 6c2:	35 07       	cpc	r19, r21
 6c4:	0c f4       	brge	.+2      	; 0x6c8 <digital_read+0x26>
 6c6:	91 50       	subi	r25, 0x01	; 1
 6c8:	29 2f       	mov	r18, r25
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	f9 01       	movw	r30, r18
 6ce:	ee 0f       	add	r30, r30
 6d0:	ff 1f       	adc	r31, r31
 6d2:	2e 0f       	add	r18, r30
 6d4:	3f 1f       	adc	r19, r31
 6d6:	ee 27       	eor	r30, r30
 6d8:	ff 27       	eor	r31, r31
 6da:	e2 1b       	sub	r30, r18
 6dc:	f3 0b       	sbc	r31, r19
 6de:	e9 5a       	subi	r30, 0xA9	; 169
 6e0:	ff 4f       	sbci	r31, 0xFF	; 255
 6e2:	40 e1       	ldi	r20, 0x10	; 16
 6e4:	94 9f       	mul	r25, r20
 6e6:	80 19       	sub	r24, r0
 6e8:	11 24       	eor	r1, r1
 6ea:	21 e0       	ldi	r18, 0x01	; 1
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	a9 01       	movw	r20, r18
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <digital_read+0x54>
 6f2:	44 0f       	add	r20, r20
 6f4:	55 1f       	adc	r21, r21
 6f6:	8a 95       	dec	r24
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <digital_read+0x50>
 6fa:	ca 01       	movw	r24, r20
 6fc:	90 81       	ld	r25, Z
 6fe:	89 23       	and	r24, r25
 700:	08 95       	ret

00000702 <UART_init>:
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)


void UART_init(long USART_BAUDRATE)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);
 702:	2a b1       	in	r18, 0x0a	; 10
 704:	28 61       	ori	r18, 0x18	; 24
 706:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
 708:	20 b5       	in	r18, 0x20	; 32
 70a:	26 68       	ori	r18, 0x86	; 134
 70c:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;
 70e:	dc 01       	movw	r26, r24
 710:	cb 01       	movw	r24, r22
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	aa 1f       	adc	r26, r26
 718:	bb 1f       	adc	r27, r27
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	aa 1f       	adc	r26, r26
 720:	bb 1f       	adc	r27, r27
 722:	9c 01       	movw	r18, r24
 724:	ad 01       	movw	r20, r26
 726:	22 0f       	add	r18, r18
 728:	33 1f       	adc	r19, r19
 72a:	44 1f       	adc	r20, r20
 72c:	55 1f       	adc	r21, r21
 72e:	22 0f       	add	r18, r18
 730:	33 1f       	adc	r19, r19
 732:	44 1f       	adc	r20, r20
 734:	55 1f       	adc	r21, r21
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	72 e1       	ldi	r23, 0x12	; 18
 73a:	8a e7       	ldi	r24, 0x7A	; 122
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__udivmodsi4>
 742:	8f ef       	ldi	r24, 0xFF	; 255
 744:	82 0f       	add	r24, r18
 746:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);
 748:	da 01       	movw	r26, r20
 74a:	c9 01       	movw	r24, r18
 74c:	01 97       	sbiw	r24, 0x01	; 1
 74e:	a1 09       	sbc	r26, r1
 750:	b1 09       	sbc	r27, r1
 752:	89 2f       	mov	r24, r25
 754:	9a 2f       	mov	r25, r26
 756:	ab 2f       	mov	r26, r27
 758:	bb 27       	eor	r27, r27
 75a:	80 bd       	out	0x20, r24	; 32
 75c:	08 95       	ret

0000075e <UART_RxChar>:
}

unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);
 75e:	5f 9b       	sbis	0x0b, 7	; 11
 760:	fe cf       	rjmp	.-4      	; 0x75e <UART_RxChar>
	return(UDR);
 762:	8c b1       	in	r24, 0x0c	; 12
}
 764:	08 95       	ret

00000766 <UART_TxChar>:

void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));
 766:	5d 9b       	sbis	0x0b, 5	; 11
 768:	fe cf       	rjmp	.-4      	; 0x766 <UART_TxChar>
	UDR = ch ;
 76a:	8c b9       	out	0x0c, r24	; 12
 76c:	08 95       	ret

0000076e <HStepper_init>:
#include "CLOCK_interface.h"
#include "Stepper_interface.h"
#include<stdlib.h>

void HStepper_init(Stepper_t* stepper, enum HStepper_step_size stepSize, u16 steps_per_rev, u8 pin1, u8 pin2, u8 pin3, u8 pin4, u8 lim_pin, enum HStepper_lim_switch_pull_state lim_pull_state)
{
 76e:	6f 92       	push	r6
 770:	7f 92       	push	r7
 772:	8f 92       	push	r8
 774:	af 92       	push	r10
 776:	cf 92       	push	r12
 778:	ef 92       	push	r14
 77a:	0f 93       	push	r16
 77c:	1f 93       	push	r17
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
 786:	3c 01       	movw	r6, r24
	stepper->step_size = stepSize ;
 788:	fc 01       	movw	r30, r24
 78a:	61 8b       	std	Z+17, r22	; 0x11
	stepper->steps_total = steps_per_rev ;
 78c:	50 87       	std	Z+8, r21	; 0x08
 78e:	47 83       	std	Z+7, r20	; 0x07
	
	stepper->pins[0] = pin1 ;
 790:	20 83       	st	Z, r18
	stepper->pins[1] = pin2 ;
 792:	01 83       	std	Z+1, r16	; 0x01
	stepper->pins[2] = pin3 ;
 794:	e2 82       	std	Z+2, r14	; 0x02
	stepper->pins[3] = pin4 ;
 796:	c3 82       	std	Z+3, r12	; 0x03
	for (u8 i=0; i<4; i++)
 798:	10 e0       	ldi	r17, 0x00	; 0
 79a:	08 c0       	rjmp	.+16     	; 0x7ac <HStepper_init+0x3e>
		init_PIN(stepper->pins[i], OUTPUT) ;
 79c:	f3 01       	movw	r30, r6
 79e:	e1 0f       	add	r30, r17
 7a0:	f1 1d       	adc	r31, r1
 7a2:	61 e0       	ldi	r22, 0x01	; 1
 7a4:	80 81       	ld	r24, Z
 7a6:	0e 94 bc 02 	call	0x578	; 0x578 <init_PIN>
	
	stepper->pins[0] = pin1 ;
	stepper->pins[1] = pin2 ;
	stepper->pins[2] = pin3 ;
	stepper->pins[3] = pin4 ;
	for (u8 i=0; i<4; i++)
 7aa:	1f 5f       	subi	r17, 0xFF	; 255
 7ac:	14 30       	cpi	r17, 0x04	; 4
 7ae:	b0 f3       	brcs	.-20     	; 0x79c <HStepper_init+0x2e>
		init_PIN(stepper->pins[i], OUTPUT) ;
		
	stepper->lim_switch_pin = lim_pin ;
 7b0:	f3 01       	movw	r30, r6
 7b2:	a4 82       	std	Z+4, r10	; 0x04
	stepper->lim_switch_pull_state = lim_pull_state ;
 7b4:	82 8a       	std	Z+18, r8	; 0x12
	init_PIN(lim_pin, INPUT) ;
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	8a 2d       	mov	r24, r10
 7ba:	0e 94 bc 02 	call	0x578	; 0x578 <init_PIN>
	set_PIN(lim_pin, lim_pull_state) ;
 7be:	68 2d       	mov	r22, r8
 7c0:	8a 2d       	mov	r24, r10
 7c2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
		
	stepper->last_time_stamp = 0 ;
 7c6:	f3 01       	movw	r30, r6
 7c8:	15 86       	std	Z+13, r1	; 0x0d
 7ca:	16 86       	std	Z+14, r1	; 0x0e
 7cc:	17 86       	std	Z+15, r1	; 0x0f
 7ce:	10 8a       	std	Z+16, r1	; 0x10
	MTIM1_voidInit(TIM1_CS_DIV_64, TIM1_MODE_NORMAL, TIM1_Ch_DIS, TIM1_Ch_DIS, 0) ;
 7d0:	00 e0       	ldi	r16, 0x00	; 0
 7d2:	10 e0       	ldi	r17, 0x00	; 0
 7d4:	20 e0       	ldi	r18, 0x00	; 0
 7d6:	40 e0       	ldi	r20, 0x00	; 0
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	83 e0       	ldi	r24, 0x03	; 3
 7dc:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <MTIM1_voidInit>
	MTIM1_voidStartTickMeasure() ;
 7e0:	0e 94 16 06 	call	0xc2c	; 0xc2c <MTIM1_voidStartTickMeasure>
}
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	1f 91       	pop	r17
 7ea:	0f 91       	pop	r16
 7ec:	ef 90       	pop	r14
 7ee:	cf 90       	pop	r12
 7f0:	af 90       	pop	r10
 7f2:	8f 90       	pop	r8
 7f4:	7f 90       	pop	r7
 7f6:	6f 90       	pop	r6
 7f8:	08 95       	ret

000007fa <HStepper_set_speed>:

void HStepper_set_speed(Stepper_t* stepper, u16 speed)
{
 7fa:	cf 92       	push	r12
 7fc:	df 92       	push	r13
 7fe:	ef 92       	push	r14
 800:	ff 92       	push	r15
 802:	0f 93       	push	r16
 804:	1f 93       	push	r17
 806:	cf 93       	push	r28
 808:	df 93       	push	r29
 80a:	ec 01       	movw	r28, r24
 80c:	8b 01       	movw	r16, r22
	stepper->ticks_delay_between_steps = 60L * MCLOCK_u32GetSystemClock() / stepper->steps_total / speed / MTIM1_u16GetDivision() ; //check the factor!
 80e:	0e 94 51 00 	call	0xa2	; 0xa2 <MCLOCK_u32GetSystemClock>
 812:	9b 01       	movw	r18, r22
 814:	ac 01       	movw	r20, r24
 816:	ac e3       	ldi	r26, 0x3C	; 60
 818:	b0 e0       	ldi	r27, 0x00	; 0
 81a:	0e 94 a1 07 	call	0xf42	; 0xf42 <__muluhisi3>
 81e:	2f 81       	ldd	r18, Y+7	; 0x07
 820:	38 85       	ldd	r19, Y+8	; 0x08
 822:	40 e0       	ldi	r20, 0x00	; 0
 824:	50 e0       	ldi	r21, 0x00	; 0
 826:	0e 94 6a 07 	call	0xed4	; 0xed4 <__udivmodsi4>
 82a:	ca 01       	movw	r24, r20
 82c:	b9 01       	movw	r22, r18
 82e:	98 01       	movw	r18, r16
 830:	40 e0       	ldi	r20, 0x00	; 0
 832:	50 e0       	ldi	r21, 0x00	; 0
 834:	0e 94 6a 07 	call	0xed4	; 0xed4 <__udivmodsi4>
 838:	69 01       	movw	r12, r18
 83a:	7a 01       	movw	r14, r20
 83c:	0e 94 44 06 	call	0xc88	; 0xc88 <MTIM1_u16GetDivision>
 840:	9c 01       	movw	r18, r24
 842:	40 e0       	ldi	r20, 0x00	; 0
 844:	50 e0       	ldi	r21, 0x00	; 0
 846:	c7 01       	movw	r24, r14
 848:	b6 01       	movw	r22, r12
 84a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__udivmodsi4>
 84e:	29 87       	std	Y+9, r18	; 0x09
 850:	3a 87       	std	Y+10, r19	; 0x0a
 852:	4b 87       	std	Y+11, r20	; 0x0b
 854:	5c 87       	std	Y+12, r21	; 0x0c
	// remember that :
	// time of one timer tick = N / f_cpu
	// time of whole OVF = (1+top) * N / f_cpu
}
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	1f 91       	pop	r17
 85c:	0f 91       	pop	r16
 85e:	ff 90       	pop	r15
 860:	ef 90       	pop	r14
 862:	df 90       	pop	r13
 864:	cf 90       	pop	r12
 866:	08 95       	ret

00000868 <HStepper_step_from_seq>:
		}
	}
}

void HStepper_step_from_seq(Stepper_t* stepper, u8 n)
{
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	ec 01       	movw	r28, r24
	if (stepper->step_size == HStepper_full_step)
 86e:	89 89       	ldd	r24, Y+17	; 0x11
 870:	84 30       	cpi	r24, 0x04	; 4
 872:	09 f0       	breq	.+2      	; 0x876 <HStepper_step_from_seq+0xe>
 874:	4c c0       	rjmp	.+152    	; 0x90e <HStepper_step_from_seq+0xa6>
		switch(n)
 876:	61 30       	cpi	r22, 0x01	; 1
 878:	b9 f0       	breq	.+46     	; 0x8a8 <HStepper_step_from_seq+0x40>
 87a:	28 f0       	brcs	.+10     	; 0x886 <HStepper_step_from_seq+0x1e>
 87c:	62 30       	cpi	r22, 0x02	; 2
 87e:	29 f1       	breq	.+74     	; 0x8ca <HStepper_step_from_seq+0x62>
 880:	63 30       	cpi	r22, 0x03	; 3
 882:	a1 f1       	breq	.+104    	; 0x8ec <HStepper_step_from_seq+0x84>
 884:	d9 c0       	rjmp	.+434    	; 0xa38 <HStepper_step_from_seq+0x1d0>
		{
			case 0 : //1010
				set_PIN(stepper->pins[0], HIGH);
 886:	61 e0       	ldi	r22, 0x01	; 1
 888:	88 81       	ld	r24, Y
 88a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[1], LOW);
 88e:	60 e0       	ldi	r22, 0x00	; 0
 890:	89 81       	ldd	r24, Y+1	; 0x01
 892:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[2], HIGH);
 896:	61 e0       	ldi	r22, 0x01	; 1
 898:	8a 81       	ldd	r24, Y+2	; 0x02
 89a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[3], LOW);
 89e:	60 e0       	ldi	r22, 0x00	; 0
 8a0:	8b 81       	ldd	r24, Y+3	; 0x03
 8a2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				break;
 8a6:	c8 c0       	rjmp	.+400    	; 0xa38 <HStepper_step_from_seq+0x1d0>
			case 1 : //0110
				set_PIN(stepper->pins[0], LOW);
 8a8:	60 e0       	ldi	r22, 0x00	; 0
 8aa:	88 81       	ld	r24, Y
 8ac:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[1], HIGH);
 8b0:	61 e0       	ldi	r22, 0x01	; 1
 8b2:	89 81       	ldd	r24, Y+1	; 0x01
 8b4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[2], HIGH);
 8b8:	61 e0       	ldi	r22, 0x01	; 1
 8ba:	8a 81       	ldd	r24, Y+2	; 0x02
 8bc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[3], LOW);
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	8b 81       	ldd	r24, Y+3	; 0x03
 8c4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				break;
 8c8:	b7 c0       	rjmp	.+366    	; 0xa38 <HStepper_step_from_seq+0x1d0>
			case 2 : //0101
				set_PIN(stepper->pins[0], LOW);
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	88 81       	ld	r24, Y
 8ce:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[1], HIGH);
 8d2:	61 e0       	ldi	r22, 0x01	; 1
 8d4:	89 81       	ldd	r24, Y+1	; 0x01
 8d6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[2], LOW);
 8da:	60 e0       	ldi	r22, 0x00	; 0
 8dc:	8a 81       	ldd	r24, Y+2	; 0x02
 8de:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[3], HIGH);
 8e2:	61 e0       	ldi	r22, 0x01	; 1
 8e4:	8b 81       	ldd	r24, Y+3	; 0x03
 8e6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				break;
 8ea:	a6 c0       	rjmp	.+332    	; 0xa38 <HStepper_step_from_seq+0x1d0>
			case 3 : //1001
				set_PIN(stepper->pins[0], HIGH);
 8ec:	61 e0       	ldi	r22, 0x01	; 1
 8ee:	88 81       	ld	r24, Y
 8f0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[1], LOW);
 8f4:	60 e0       	ldi	r22, 0x00	; 0
 8f6:	89 81       	ldd	r24, Y+1	; 0x01
 8f8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[2], LOW);
 8fc:	60 e0       	ldi	r22, 0x00	; 0
 8fe:	8a 81       	ldd	r24, Y+2	; 0x02
 900:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[3], HIGH);
 904:	61 e0       	ldi	r22, 0x01	; 1
 906:	8b 81       	ldd	r24, Y+3	; 0x03
 908:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				break;
 90c:	95 c0       	rjmp	.+298    	; 0xa38 <HStepper_step_from_seq+0x1d0>
		}
		
	else if (stepper->step_size == HStepper_half_step)
 90e:	88 30       	cpi	r24, 0x08	; 8
 910:	09 f0       	breq	.+2      	; 0x914 <HStepper_step_from_seq+0xac>
 912:	92 c0       	rjmp	.+292    	; 0xa38 <HStepper_step_from_seq+0x1d0>
		//01 10		3
		//01 00		4
		//01 01		5
		//00 01		6
		//10 01		7
		switch (n)
 914:	86 2f       	mov	r24, r22
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	88 30       	cpi	r24, 0x08	; 8
 91a:	91 05       	cpc	r25, r1
 91c:	08 f0       	brcs	.+2      	; 0x920 <HStepper_step_from_seq+0xb8>
 91e:	8c c0       	rjmp	.+280    	; 0xa38 <HStepper_step_from_seq+0x1d0>
 920:	fc 01       	movw	r30, r24
 922:	e6 5d       	subi	r30, 0xD6	; 214
 924:	ff 4f       	sbci	r31, 0xFF	; 255
 926:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__tablejump2__>
		{
			case 0 : // 1000
				set_PIN(stepper->pins[0], HIGH);
 92a:	61 e0       	ldi	r22, 0x01	; 1
 92c:	88 81       	ld	r24, Y
 92e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[1], LOW);
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	89 81       	ldd	r24, Y+1	; 0x01
 936:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[2], LOW);
 93a:	60 e0       	ldi	r22, 0x00	; 0
 93c:	8a 81       	ldd	r24, Y+2	; 0x02
 93e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[3], LOW);
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	8b 81       	ldd	r24, Y+3	; 0x03
 946:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				break;
 94a:	76 c0       	rjmp	.+236    	; 0xa38 <HStepper_step_from_seq+0x1d0>
			case 1 : // 1010
				set_PIN(stepper->pins[0], HIGH);
 94c:	61 e0       	ldi	r22, 0x01	; 1
 94e:	88 81       	ld	r24, Y
 950:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[1], LOW);
 954:	60 e0       	ldi	r22, 0x00	; 0
 956:	89 81       	ldd	r24, Y+1	; 0x01
 958:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[2], HIGH);
 95c:	61 e0       	ldi	r22, 0x01	; 1
 95e:	8a 81       	ldd	r24, Y+2	; 0x02
 960:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[3], LOW);
 964:	60 e0       	ldi	r22, 0x00	; 0
 966:	8b 81       	ldd	r24, Y+3	; 0x03
 968:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				break;
 96c:	65 c0       	rjmp	.+202    	; 0xa38 <HStepper_step_from_seq+0x1d0>
			case 2 : // 0010
				set_PIN(stepper->pins[0], LOW);
 96e:	60 e0       	ldi	r22, 0x00	; 0
 970:	88 81       	ld	r24, Y
 972:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[1], LOW);
 976:	60 e0       	ldi	r22, 0x00	; 0
 978:	89 81       	ldd	r24, Y+1	; 0x01
 97a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[2], HIGH);
 97e:	61 e0       	ldi	r22, 0x01	; 1
 980:	8a 81       	ldd	r24, Y+2	; 0x02
 982:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[3], LOW);
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	8b 81       	ldd	r24, Y+3	; 0x03
 98a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				break;
 98e:	54 c0       	rjmp	.+168    	; 0xa38 <HStepper_step_from_seq+0x1d0>
			case 3 : // 0110
				set_PIN(stepper->pins[0], LOW);
 990:	60 e0       	ldi	r22, 0x00	; 0
 992:	88 81       	ld	r24, Y
 994:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[1], HIGH);
 998:	61 e0       	ldi	r22, 0x01	; 1
 99a:	89 81       	ldd	r24, Y+1	; 0x01
 99c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[2], HIGH);
 9a0:	61 e0       	ldi	r22, 0x01	; 1
 9a2:	8a 81       	ldd	r24, Y+2	; 0x02
 9a4:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[3], LOW);
 9a8:	60 e0       	ldi	r22, 0x00	; 0
 9aa:	8b 81       	ldd	r24, Y+3	; 0x03
 9ac:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				break;
 9b0:	43 c0       	rjmp	.+134    	; 0xa38 <HStepper_step_from_seq+0x1d0>
			case 4 : // 0100
				set_PIN(stepper->pins[0], LOW);
 9b2:	60 e0       	ldi	r22, 0x00	; 0
 9b4:	88 81       	ld	r24, Y
 9b6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[1], HIGH);
 9ba:	61 e0       	ldi	r22, 0x01	; 1
 9bc:	89 81       	ldd	r24, Y+1	; 0x01
 9be:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[2], LOW);
 9c2:	60 e0       	ldi	r22, 0x00	; 0
 9c4:	8a 81       	ldd	r24, Y+2	; 0x02
 9c6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[3], LOW);
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	8b 81       	ldd	r24, Y+3	; 0x03
 9ce:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				break;
 9d2:	32 c0       	rjmp	.+100    	; 0xa38 <HStepper_step_from_seq+0x1d0>
			case 5 : // 0101
				set_PIN(stepper->pins[0], LOW);
 9d4:	60 e0       	ldi	r22, 0x00	; 0
 9d6:	88 81       	ld	r24, Y
 9d8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[1], HIGH);
 9dc:	61 e0       	ldi	r22, 0x01	; 1
 9de:	89 81       	ldd	r24, Y+1	; 0x01
 9e0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[2], LOW);
 9e4:	60 e0       	ldi	r22, 0x00	; 0
 9e6:	8a 81       	ldd	r24, Y+2	; 0x02
 9e8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[3], HIGH);
 9ec:	61 e0       	ldi	r22, 0x01	; 1
 9ee:	8b 81       	ldd	r24, Y+3	; 0x03
 9f0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				break;
 9f4:	21 c0       	rjmp	.+66     	; 0xa38 <HStepper_step_from_seq+0x1d0>
			case 6 : // 0001
				set_PIN(stepper->pins[0], LOW);
 9f6:	60 e0       	ldi	r22, 0x00	; 0
 9f8:	88 81       	ld	r24, Y
 9fa:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[1], LOW);
 9fe:	60 e0       	ldi	r22, 0x00	; 0
 a00:	89 81       	ldd	r24, Y+1	; 0x01
 a02:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[2], LOW);
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	8a 81       	ldd	r24, Y+2	; 0x02
 a0a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[3], HIGH);
 a0e:	61 e0       	ldi	r22, 0x01	; 1
 a10:	8b 81       	ldd	r24, Y+3	; 0x03
 a12:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				break;
 a16:	10 c0       	rjmp	.+32     	; 0xa38 <HStepper_step_from_seq+0x1d0>
			case 7 : // 1001
				set_PIN(stepper->pins[0], HIGH);
 a18:	61 e0       	ldi	r22, 0x01	; 1
 a1a:	88 81       	ld	r24, Y
 a1c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[1], LOW);
 a20:	60 e0       	ldi	r22, 0x00	; 0
 a22:	89 81       	ldd	r24, Y+1	; 0x01
 a24:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[2], LOW);
 a28:	60 e0       	ldi	r22, 0x00	; 0
 a2a:	8a 81       	ldd	r24, Y+2	; 0x02
 a2c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				set_PIN(stepper->pins[3], HIGH);
 a30:	61 e0       	ldi	r22, 0x01	; 1
 a32:	8b 81       	ldd	r24, Y+3	; 0x03
 a34:	0e 94 ff 02 	call	0x5fe	; 0x5fe <set_PIN>
				break;
		}
}
 a38:	df 91       	pop	r29
 a3a:	cf 91       	pop	r28
 a3c:	08 95       	ret

00000a3e <HStepper_step>:
	// time of one timer tick = N / f_cpu
	// time of whole OVF = (1+top) * N / f_cpu
}

void HStepper_step(Stepper_t* stepper, s16 steps)
{
 a3e:	4f 92       	push	r4
 a40:	5f 92       	push	r5
 a42:	6f 92       	push	r6
 a44:	7f 92       	push	r7
 a46:	8f 92       	push	r8
 a48:	9f 92       	push	r9
 a4a:	af 92       	push	r10
 a4c:	bf 92       	push	r11
 a4e:	ef 92       	push	r14
 a50:	ff 92       	push	r15
 a52:	0f 93       	push	r16
 a54:	1f 93       	push	r17
 a56:	cf 93       	push	r28
 a58:	df 93       	push	r29
 a5a:	8c 01       	movw	r16, r24
 a5c:	eb 01       	movw	r28, r22
	s16 steps_done = 0 ;
 a5e:	e1 2c       	mov	r14, r1
 a60:	f1 2c       	mov	r15, r1
	u8 direction = (steps>0) ? 1 : 0 ;
	while (steps_done < abs(steps))
 a62:	47 c0       	rjmp	.+142    	; 0xaf2 <HStepper_step+0xb4>
	{
		// here you should use the timestamp because the steps may occur one after another, each in individual call.
		u32 current_ticks = MTIM1_u32GetElapsedTicks() ;
 a64:	0e 94 28 06 	call	0xc50	; 0xc50 <MTIM1_u32GetElapsedTicks>
		if (current_ticks - stepper->last_time_stamp   >=   stepper->ticks_delay_between_steps)
 a68:	f8 01       	movw	r30, r16
 a6a:	85 84       	ldd	r8, Z+13	; 0x0d
 a6c:	96 84       	ldd	r9, Z+14	; 0x0e
 a6e:	a7 84       	ldd	r10, Z+15	; 0x0f
 a70:	b0 88       	ldd	r11, Z+16	; 0x10
 a72:	2b 01       	movw	r4, r22
 a74:	3c 01       	movw	r6, r24
 a76:	48 18       	sub	r4, r8
 a78:	59 08       	sbc	r5, r9
 a7a:	6a 08       	sbc	r6, r10
 a7c:	7b 08       	sbc	r7, r11
 a7e:	81 84       	ldd	r8, Z+9	; 0x09
 a80:	92 84       	ldd	r9, Z+10	; 0x0a
 a82:	a3 84       	ldd	r10, Z+11	; 0x0b
 a84:	b4 84       	ldd	r11, Z+12	; 0x0c
 a86:	48 14       	cp	r4, r8
 a88:	59 04       	cpc	r5, r9
 a8a:	6a 04       	cpc	r6, r10
 a8c:	7b 04       	cpc	r7, r11
 a8e:	88 f1       	brcs	.+98     	; 0xaf2 <HStepper_step+0xb4>
		{
			stepper->last_time_stamp = current_ticks ;
 a90:	65 87       	std	Z+13, r22	; 0x0d
 a92:	76 87       	std	Z+14, r23	; 0x0e
 a94:	87 87       	std	Z+15, r24	; 0x0f
 a96:	90 8b       	std	Z+16, r25	; 0x10
			if (direction == 1)
 a98:	1c 16       	cp	r1, r28
 a9a:	1d 06       	cpc	r1, r29
 a9c:	6c f4       	brge	.+26     	; 0xab8 <HStepper_step+0x7a>
			{
				stepper->current_step_number++ ;
 a9e:	85 81       	ldd	r24, Z+5	; 0x05
 aa0:	96 81       	ldd	r25, Z+6	; 0x06
 aa2:	01 96       	adiw	r24, 0x01	; 1
 aa4:	96 83       	std	Z+6, r25	; 0x06
 aa6:	85 83       	std	Z+5, r24	; 0x05
				if (stepper->current_step_number == stepper->steps_total)
 aa8:	27 81       	ldd	r18, Z+7	; 0x07
 aaa:	30 85       	ldd	r19, Z+8	; 0x08
 aac:	82 17       	cp	r24, r18
 aae:	93 07       	cpc	r25, r19
 ab0:	91 f4       	brne	.+36     	; 0xad6 <HStepper_step+0x98>
					stepper->current_step_number = 0 ;
 ab2:	16 82       	std	Z+6, r1	; 0x06
 ab4:	15 82       	std	Z+5, r1	; 0x05
 ab6:	0f c0       	rjmp	.+30     	; 0xad6 <HStepper_step+0x98>
			}
			else //if (direction==0)
			{
				if (stepper->current_step_number == 0)
 ab8:	f8 01       	movw	r30, r16
 aba:	85 81       	ldd	r24, Z+5	; 0x05
 abc:	96 81       	ldd	r25, Z+6	; 0x06
 abe:	89 2b       	or	r24, r25
 ac0:	21 f4       	brne	.+8      	; 0xaca <HStepper_step+0x8c>
					stepper->current_step_number = stepper->steps_total ;
 ac2:	87 81       	ldd	r24, Z+7	; 0x07
 ac4:	90 85       	ldd	r25, Z+8	; 0x08
 ac6:	96 83       	std	Z+6, r25	; 0x06
 ac8:	85 83       	std	Z+5, r24	; 0x05
				stepper->current_step_number-- ;
 aca:	f8 01       	movw	r30, r16
 acc:	85 81       	ldd	r24, Z+5	; 0x05
 ace:	96 81       	ldd	r25, Z+6	; 0x06
 ad0:	01 97       	sbiw	r24, 0x01	; 1
 ad2:	96 83       	std	Z+6, r25	; 0x06
 ad4:	85 83       	std	Z+5, r24	; 0x05
			}
			HStepper_step_from_seq(stepper, stepper->current_step_number % stepper->step_size) ;
 ad6:	f8 01       	movw	r30, r16
 ad8:	85 81       	ldd	r24, Z+5	; 0x05
 ada:	96 81       	ldd	r25, Z+6	; 0x06
 adc:	61 89       	ldd	r22, Z+17	; 0x11
 ade:	70 e0       	ldi	r23, 0x00	; 0
 ae0:	0e 94 56 07 	call	0xeac	; 0xeac <__divmodhi4>
 ae4:	68 2f       	mov	r22, r24
 ae6:	c8 01       	movw	r24, r16
 ae8:	0e 94 34 04 	call	0x868	; 0x868 <HStepper_step_from_seq>
			steps_done++ ;
 aec:	ff ef       	ldi	r31, 0xFF	; 255
 aee:	ef 1a       	sub	r14, r31
 af0:	ff 0a       	sbc	r15, r31

void HStepper_step(Stepper_t* stepper, s16 steps)
{
	s16 steps_done = 0 ;
	u8 direction = (steps>0) ? 1 : 0 ;
	while (steps_done < abs(steps))
 af2:	ce 01       	movw	r24, r28
 af4:	dd 23       	and	r29, r29
 af6:	24 f4       	brge	.+8      	; 0xb00 <HStepper_step+0xc2>
 af8:	88 27       	eor	r24, r24
 afa:	99 27       	eor	r25, r25
 afc:	8c 1b       	sub	r24, r28
 afe:	9d 0b       	sbc	r25, r29
 b00:	e8 16       	cp	r14, r24
 b02:	f9 06       	cpc	r15, r25
 b04:	0c f4       	brge	.+2      	; 0xb08 <HStepper_step+0xca>
 b06:	ae cf       	rjmp	.-164    	; 0xa64 <HStepper_step+0x26>
			}
			HStepper_step_from_seq(stepper, stepper->current_step_number % stepper->step_size) ;
			steps_done++ ;
		}
	}
}
 b08:	df 91       	pop	r29
 b0a:	cf 91       	pop	r28
 b0c:	1f 91       	pop	r17
 b0e:	0f 91       	pop	r16
 b10:	ff 90       	pop	r15
 b12:	ef 90       	pop	r14
 b14:	bf 90       	pop	r11
 b16:	af 90       	pop	r10
 b18:	9f 90       	pop	r9
 b1a:	8f 90       	pop	r8
 b1c:	7f 90       	pop	r7
 b1e:	6f 90       	pop	r6
 b20:	5f 90       	pop	r5
 b22:	4f 90       	pop	r4
 b24:	08 95       	ret

00000b26 <__vector_9>:
{
	if (Mode == TIM2_INTERRUPT_OVERFLOW)
		PTIM2_callback_OVF = CallBack;

	else if (Mode == TIM2_INTERRUPT_COMPARE)
	PTIM2_callback_CTC = CallBack;
 b26:	1f 92       	push	r1
 b28:	0f 92       	push	r0
 b2a:	0f b6       	in	r0, 0x3f	; 63
 b2c:	0f 92       	push	r0
 b2e:	11 24       	eor	r1, r1
 b30:	2f 93       	push	r18
 b32:	3f 93       	push	r19
 b34:	4f 93       	push	r20
 b36:	5f 93       	push	r21
 b38:	6f 93       	push	r22
 b3a:	7f 93       	push	r23
 b3c:	8f 93       	push	r24
 b3e:	9f 93       	push	r25
 b40:	af 93       	push	r26
 b42:	bf 93       	push	r27
 b44:	ef 93       	push	r30
 b46:	ff 93       	push	r31
 b48:	e0 91 d3 00 	lds	r30, 0x00D3	; 0x8000d3 <PTIM0_callback_OVF>
 b4c:	f0 91 d4 00 	lds	r31, 0x00D4	; 0x8000d4 <PTIM0_callback_OVF+0x1>
 b50:	09 95       	icall
 b52:	ff 91       	pop	r31
 b54:	ef 91       	pop	r30
 b56:	bf 91       	pop	r27
 b58:	af 91       	pop	r26
 b5a:	9f 91       	pop	r25
 b5c:	8f 91       	pop	r24
 b5e:	7f 91       	pop	r23
 b60:	6f 91       	pop	r22
 b62:	5f 91       	pop	r21
 b64:	4f 91       	pop	r20
 b66:	3f 91       	pop	r19
 b68:	2f 91       	pop	r18
 b6a:	0f 90       	pop	r0
 b6c:	0f be       	out	0x3f, r0	; 63
 b6e:	0f 90       	pop	r0
 b70:	1f 90       	pop	r1
 b72:	18 95       	reti

00000b74 <__vector_19>:
 b74:	1f 92       	push	r1
 b76:	0f 92       	push	r0
 b78:	0f b6       	in	r0, 0x3f	; 63
 b7a:	0f 92       	push	r0
 b7c:	11 24       	eor	r1, r1
 b7e:	2f 93       	push	r18
 b80:	3f 93       	push	r19
 b82:	4f 93       	push	r20
 b84:	5f 93       	push	r21
 b86:	6f 93       	push	r22
 b88:	7f 93       	push	r23
 b8a:	8f 93       	push	r24
 b8c:	9f 93       	push	r25
 b8e:	af 93       	push	r26
 b90:	bf 93       	push	r27
 b92:	ef 93       	push	r30
 b94:	ff 93       	push	r31
 b96:	e0 91 bd 00 	lds	r30, 0x00BD	; 0x8000bd <PTIM0_callback_CTC>
 b9a:	f0 91 be 00 	lds	r31, 0x00BE	; 0x8000be <PTIM0_callback_CTC+0x1>
 b9e:	09 95       	icall
 ba0:	ff 91       	pop	r31
 ba2:	ef 91       	pop	r30
 ba4:	bf 91       	pop	r27
 ba6:	af 91       	pop	r26
 ba8:	9f 91       	pop	r25
 baa:	8f 91       	pop	r24
 bac:	7f 91       	pop	r23
 bae:	6f 91       	pop	r22
 bb0:	5f 91       	pop	r21
 bb2:	4f 91       	pop	r20
 bb4:	3f 91       	pop	r19
 bb6:	2f 91       	pop	r18
 bb8:	0f 90       	pop	r0
 bba:	0f be       	out	0x3f, r0	; 63
 bbc:	0f 90       	pop	r0
 bbe:	1f 90       	pop	r1
 bc0:	18 95       	reti

00000bc2 <MTIM1_voidInit>:
 bc2:	0f 93       	push	r16
 bc4:	1f 93       	push	r17
 bc6:	90 e4       	ldi	r25, 0x40	; 64
 bc8:	49 9f       	mul	r20, r25
 bca:	a0 01       	movw	r20, r0
 bcc:	11 24       	eor	r1, r1
 bce:	90 e1       	ldi	r25, 0x10	; 16
 bd0:	29 9f       	mul	r18, r25
 bd2:	90 01       	movw	r18, r0
 bd4:	11 24       	eor	r1, r1
 bd6:	96 2f       	mov	r25, r22
 bd8:	93 70       	andi	r25, 0x03	; 3
 bda:	49 2b       	or	r20, r25
 bdc:	24 2b       	or	r18, r20
 bde:	2f bd       	out	0x2f, r18	; 47
 be0:	26 2f       	mov	r18, r22
 be2:	2c 70       	andi	r18, 0x0C	; 12
 be4:	30 e0       	ldi	r19, 0x00	; 0
 be6:	22 0f       	add	r18, r18
 be8:	33 1f       	adc	r19, r19
 bea:	28 2b       	or	r18, r24
 bec:	2e bd       	out	0x2e, r18	; 46
 bee:	1d bd       	out	0x2d, r17	; 45
 bf0:	0c bd       	out	0x2c, r16	; 44
 bf2:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <PTIM1_Current_ClockSource>
 bf6:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <PTIM1_current_Mode>
 bfa:	1f 91       	pop	r17
 bfc:	0f 91       	pop	r16
 bfe:	08 95       	ret

00000c00 <MTIM1_voidEnableInterrupt>:
 c00:	49 b7       	in	r20, 0x39	; 57
 c02:	28 2f       	mov	r18, r24
 c04:	30 e0       	ldi	r19, 0x00	; 0
 c06:	2e 5f       	subi	r18, 0xFE	; 254
 c08:	3f 4f       	sbci	r19, 0xFF	; 255
 c0a:	81 e0       	ldi	r24, 0x01	; 1
 c0c:	90 e0       	ldi	r25, 0x00	; 0
 c0e:	02 c0       	rjmp	.+4      	; 0xc14 <MTIM1_voidEnableInterrupt+0x14>
 c10:	88 0f       	add	r24, r24
 c12:	99 1f       	adc	r25, r25
 c14:	2a 95       	dec	r18
 c16:	e2 f7       	brpl	.-8      	; 0xc10 <MTIM1_voidEnableInterrupt+0x10>
 c18:	94 2f       	mov	r25, r20
 c1a:	98 2b       	or	r25, r24
 c1c:	99 bf       	out	0x39, r25	; 57
 c1e:	98 b7       	in	r25, 0x38	; 56
 c20:	89 2b       	or	r24, r25
 c22:	88 bf       	out	0x38, r24	; 56
 c24:	8f b7       	in	r24, 0x3f	; 63
 c26:	80 68       	ori	r24, 0x80	; 128
 c28:	8f bf       	out	0x3f, r24	; 63
 c2a:	08 95       	ret

00000c2c <MTIM1_voidStartTickMeasure>:
 c2c:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <PTIM1_u32OverFlowCount>
 c30:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <PTIM1_u32OverFlowCount+0x1>
 c34:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <PTIM1_u32OverFlowCount+0x2>
 c38:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <PTIM1_u32OverFlowCount+0x3>
 c3c:	80 e0       	ldi	r24, 0x00	; 0
 c3e:	0e 94 00 06 	call	0xc00	; 0xc00 <MTIM1_voidEnableInterrupt>
 c42:	8c b5       	in	r24, 0x2c	; 44
 c44:	9d b5       	in	r25, 0x2d	; 45
 c46:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <PTIM1_u16FirstValue+0x1>
 c4a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <PTIM1_u16FirstValue>
 c4e:	08 95       	ret

00000c50 <MTIM1_u32GetElapsedTicks>:
 c50:	2c b5       	in	r18, 0x2c	; 44
 c52:	3d b5       	in	r19, 0x2d	; 45
 c54:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <PTIM1_u32OverFlowCount>
 c58:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <PTIM1_u32OverFlowCount+0x1>
 c5c:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <PTIM1_u32OverFlowCount+0x2>
 c60:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <PTIM1_u32OverFlowCount+0x3>
 c64:	dc 01       	movw	r26, r24
 c66:	99 27       	eor	r25, r25
 c68:	88 27       	eor	r24, r24
 c6a:	82 0f       	add	r24, r18
 c6c:	93 1f       	adc	r25, r19
 c6e:	a1 1d       	adc	r26, r1
 c70:	b1 1d       	adc	r27, r1
 c72:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <PTIM1_u16FirstValue>
 c76:	30 91 bc 00 	lds	r19, 0x00BC	; 0x8000bc <PTIM1_u16FirstValue+0x1>
 c7a:	bc 01       	movw	r22, r24
 c7c:	cd 01       	movw	r24, r26
 c7e:	62 1b       	sub	r22, r18
 c80:	73 0b       	sbc	r23, r19
 c82:	81 09       	sbc	r24, r1
 c84:	91 09       	sbc	r25, r1
 c86:	08 95       	ret

00000c88 <MTIM1_u16GetDivision>:
 c88:	e0 91 c3 00 	lds	r30, 0x00C3	; 0x8000c3 <PTIM1_Current_ClockSource>
 c8c:	f0 e0       	ldi	r31, 0x00	; 0
 c8e:	31 97       	sbiw	r30, 0x01	; 1
 c90:	ee 0f       	add	r30, r30
 c92:	ff 1f       	adc	r31, r31
 c94:	e4 59       	subi	r30, 0x94	; 148
 c96:	ff 4f       	sbci	r31, 0xFF	; 255
 c98:	80 81       	ld	r24, Z
 c9a:	91 81       	ldd	r25, Z+1	; 0x01
 c9c:	08 95       	ret

00000c9e <__vector_8>:
 c9e:	1f 92       	push	r1
 ca0:	0f 92       	push	r0
 ca2:	0f b6       	in	r0, 0x3f	; 63
 ca4:	0f 92       	push	r0
 ca6:	11 24       	eor	r1, r1
 ca8:	2f 93       	push	r18
 caa:	3f 93       	push	r19
 cac:	4f 93       	push	r20
 cae:	5f 93       	push	r21
 cb0:	6f 93       	push	r22
 cb2:	7f 93       	push	r23
 cb4:	8f 93       	push	r24
 cb6:	9f 93       	push	r25
 cb8:	af 93       	push	r26
 cba:	bf 93       	push	r27
 cbc:	ef 93       	push	r30
 cbe:	ff 93       	push	r31
 cc0:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <PTIM1_u32OverFlowCount>
 cc4:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <PTIM1_u32OverFlowCount+0x1>
 cc8:	a0 91 d1 00 	lds	r26, 0x00D1	; 0x8000d1 <PTIM1_u32OverFlowCount+0x2>
 ccc:	b0 91 d2 00 	lds	r27, 0x00D2	; 0x8000d2 <PTIM1_u32OverFlowCount+0x3>
 cd0:	01 96       	adiw	r24, 0x01	; 1
 cd2:	a1 1d       	adc	r26, r1
 cd4:	b1 1d       	adc	r27, r1
 cd6:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <PTIM1_u32OverFlowCount>
 cda:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <PTIM1_u32OverFlowCount+0x1>
 cde:	a0 93 d1 00 	sts	0x00D1, r26	; 0x8000d1 <PTIM1_u32OverFlowCount+0x2>
 ce2:	b0 93 d2 00 	sts	0x00D2, r27	; 0x8000d2 <PTIM1_u32OverFlowCount+0x3>
 ce6:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <PTIM1_callback>
 cea:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <PTIM1_callback+0x1>
 cee:	30 97       	sbiw	r30, 0x00	; 0
 cf0:	09 f0       	breq	.+2      	; 0xcf4 <__vector_8+0x56>
 cf2:	09 95       	icall
 cf4:	ff 91       	pop	r31
 cf6:	ef 91       	pop	r30
 cf8:	bf 91       	pop	r27
 cfa:	af 91       	pop	r26
 cfc:	9f 91       	pop	r25
 cfe:	8f 91       	pop	r24
 d00:	7f 91       	pop	r23
 d02:	6f 91       	pop	r22
 d04:	5f 91       	pop	r21
 d06:	4f 91       	pop	r20
 d08:	3f 91       	pop	r19
 d0a:	2f 91       	pop	r18
 d0c:	0f 90       	pop	r0
 d0e:	0f be       	out	0x3f, r0	; 63
 d10:	0f 90       	pop	r0
 d12:	1f 90       	pop	r1
 d14:	18 95       	reti

00000d16 <__vector_7>:
 d16:	1f 92       	push	r1
 d18:	0f 92       	push	r0
 d1a:	0f b6       	in	r0, 0x3f	; 63
 d1c:	0f 92       	push	r0
 d1e:	11 24       	eor	r1, r1
 d20:	2f 93       	push	r18
 d22:	3f 93       	push	r19
 d24:	4f 93       	push	r20
 d26:	5f 93       	push	r21
 d28:	6f 93       	push	r22
 d2a:	7f 93       	push	r23
 d2c:	8f 93       	push	r24
 d2e:	9f 93       	push	r25
 d30:	af 93       	push	r26
 d32:	bf 93       	push	r27
 d34:	ef 93       	push	r30
 d36:	ff 93       	push	r31
 d38:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <PTIM1_callback+0x2>
 d3c:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <PTIM1_callback+0x3>
 d40:	30 97       	sbiw	r30, 0x00	; 0
 d42:	09 f0       	breq	.+2      	; 0xd46 <__vector_7+0x30>
 d44:	09 95       	icall
 d46:	ff 91       	pop	r31
 d48:	ef 91       	pop	r30
 d4a:	bf 91       	pop	r27
 d4c:	af 91       	pop	r26
 d4e:	9f 91       	pop	r25
 d50:	8f 91       	pop	r24
 d52:	7f 91       	pop	r23
 d54:	6f 91       	pop	r22
 d56:	5f 91       	pop	r21
 d58:	4f 91       	pop	r20
 d5a:	3f 91       	pop	r19
 d5c:	2f 91       	pop	r18
 d5e:	0f 90       	pop	r0
 d60:	0f be       	out	0x3f, r0	; 63
 d62:	0f 90       	pop	r0
 d64:	1f 90       	pop	r1
 d66:	18 95       	reti

00000d68 <__vector_6>:
 d68:	1f 92       	push	r1
 d6a:	0f 92       	push	r0
 d6c:	0f b6       	in	r0, 0x3f	; 63
 d6e:	0f 92       	push	r0
 d70:	11 24       	eor	r1, r1
 d72:	2f 93       	push	r18
 d74:	3f 93       	push	r19
 d76:	4f 93       	push	r20
 d78:	5f 93       	push	r21
 d7a:	6f 93       	push	r22
 d7c:	7f 93       	push	r23
 d7e:	8f 93       	push	r24
 d80:	9f 93       	push	r25
 d82:	af 93       	push	r26
 d84:	bf 93       	push	r27
 d86:	ef 93       	push	r30
 d88:	ff 93       	push	r31
 d8a:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <PTIM1_callback+0x4>
 d8e:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <PTIM1_callback+0x5>
 d92:	30 97       	sbiw	r30, 0x00	; 0
 d94:	09 f0       	breq	.+2      	; 0xd98 <__vector_6+0x30>
 d96:	09 95       	icall
 d98:	ff 91       	pop	r31
 d9a:	ef 91       	pop	r30
 d9c:	bf 91       	pop	r27
 d9e:	af 91       	pop	r26
 da0:	9f 91       	pop	r25
 da2:	8f 91       	pop	r24
 da4:	7f 91       	pop	r23
 da6:	6f 91       	pop	r22
 da8:	5f 91       	pop	r21
 daa:	4f 91       	pop	r20
 dac:	3f 91       	pop	r19
 dae:	2f 91       	pop	r18
 db0:	0f 90       	pop	r0
 db2:	0f be       	out	0x3f, r0	; 63
 db4:	0f 90       	pop	r0
 db6:	1f 90       	pop	r1
 db8:	18 95       	reti

00000dba <__vector_5>:
 dba:	1f 92       	push	r1
 dbc:	0f 92       	push	r0
 dbe:	0f b6       	in	r0, 0x3f	; 63
 dc0:	0f 92       	push	r0
 dc2:	11 24       	eor	r1, r1
 dc4:	2f 93       	push	r18
 dc6:	3f 93       	push	r19
 dc8:	4f 93       	push	r20
 dca:	5f 93       	push	r21
 dcc:	6f 93       	push	r22
 dce:	7f 93       	push	r23
 dd0:	8f 93       	push	r24
 dd2:	9f 93       	push	r25
 dd4:	af 93       	push	r26
 dd6:	bf 93       	push	r27
 dd8:	ef 93       	push	r30
 dda:	ff 93       	push	r31
 ddc:	e0 91 bf 00 	lds	r30, 0x00BF	; 0x8000bf <PTIM1_callback_Capture>
 de0:	f0 91 c0 00 	lds	r31, 0x00C0	; 0x8000c0 <PTIM1_callback_Capture+0x1>
 de4:	30 97       	sbiw	r30, 0x00	; 0
 de6:	19 f0       	breq	.+6      	; 0xdee <__vector_5+0x34>
 de8:	86 b5       	in	r24, 0x26	; 38
 dea:	97 b5       	in	r25, 0x27	; 39
 dec:	09 95       	icall
 dee:	ff 91       	pop	r31
 df0:	ef 91       	pop	r30
 df2:	bf 91       	pop	r27
 df4:	af 91       	pop	r26
 df6:	9f 91       	pop	r25
 df8:	8f 91       	pop	r24
 dfa:	7f 91       	pop	r23
 dfc:	6f 91       	pop	r22
 dfe:	5f 91       	pop	r21
 e00:	4f 91       	pop	r20
 e02:	3f 91       	pop	r19
 e04:	2f 91       	pop	r18
 e06:	0f 90       	pop	r0
 e08:	0f be       	out	0x3f, r0	; 63
 e0a:	0f 90       	pop	r0
 e0c:	1f 90       	pop	r1
 e0e:	18 95       	reti

00000e10 <__vector_4>:
}

void PTIM2_VECT_ISR_OVF(void)
{
 e10:	1f 92       	push	r1
 e12:	0f 92       	push	r0
 e14:	0f b6       	in	r0, 0x3f	; 63
 e16:	0f 92       	push	r0
 e18:	11 24       	eor	r1, r1
 e1a:	2f 93       	push	r18
 e1c:	3f 93       	push	r19
 e1e:	4f 93       	push	r20
 e20:	5f 93       	push	r21
 e22:	6f 93       	push	r22
 e24:	7f 93       	push	r23
 e26:	8f 93       	push	r24
 e28:	9f 93       	push	r25
 e2a:	af 93       	push	r26
 e2c:	bf 93       	push	r27
 e2e:	ef 93       	push	r30
 e30:	ff 93       	push	r31
	PTIM0_callback_OVF();
 e32:	e0 91 d3 00 	lds	r30, 0x00D3	; 0x8000d3 <PTIM0_callback_OVF>
 e36:	f0 91 d4 00 	lds	r31, 0x00D4	; 0x8000d4 <PTIM0_callback_OVF+0x1>
 e3a:	09 95       	icall
}
 e3c:	ff 91       	pop	r31
 e3e:	ef 91       	pop	r30
 e40:	bf 91       	pop	r27
 e42:	af 91       	pop	r26
 e44:	9f 91       	pop	r25
 e46:	8f 91       	pop	r24
 e48:	7f 91       	pop	r23
 e4a:	6f 91       	pop	r22
 e4c:	5f 91       	pop	r21
 e4e:	4f 91       	pop	r20
 e50:	3f 91       	pop	r19
 e52:	2f 91       	pop	r18
 e54:	0f 90       	pop	r0
 e56:	0f be       	out	0x3f, r0	; 63
 e58:	0f 90       	pop	r0
 e5a:	1f 90       	pop	r1
 e5c:	18 95       	reti

00000e5e <__vector_3>:

void PTIM2_VECT_ISR_CTC(void)
{
 e5e:	1f 92       	push	r1
 e60:	0f 92       	push	r0
 e62:	0f b6       	in	r0, 0x3f	; 63
 e64:	0f 92       	push	r0
 e66:	11 24       	eor	r1, r1
 e68:	2f 93       	push	r18
 e6a:	3f 93       	push	r19
 e6c:	4f 93       	push	r20
 e6e:	5f 93       	push	r21
 e70:	6f 93       	push	r22
 e72:	7f 93       	push	r23
 e74:	8f 93       	push	r24
 e76:	9f 93       	push	r25
 e78:	af 93       	push	r26
 e7a:	bf 93       	push	r27
 e7c:	ef 93       	push	r30
 e7e:	ff 93       	push	r31
	PTIM0_callback_CTC();
 e80:	e0 91 bd 00 	lds	r30, 0x00BD	; 0x8000bd <PTIM0_callback_CTC>
 e84:	f0 91 be 00 	lds	r31, 0x00BE	; 0x8000be <PTIM0_callback_CTC+0x1>
 e88:	09 95       	icall
}
 e8a:	ff 91       	pop	r31
 e8c:	ef 91       	pop	r30
 e8e:	bf 91       	pop	r27
 e90:	af 91       	pop	r26
 e92:	9f 91       	pop	r25
 e94:	8f 91       	pop	r24
 e96:	7f 91       	pop	r23
 e98:	6f 91       	pop	r22
 e9a:	5f 91       	pop	r21
 e9c:	4f 91       	pop	r20
 e9e:	3f 91       	pop	r19
 ea0:	2f 91       	pop	r18
 ea2:	0f 90       	pop	r0
 ea4:	0f be       	out	0x3f, r0	; 63
 ea6:	0f 90       	pop	r0
 ea8:	1f 90       	pop	r1
 eaa:	18 95       	reti

00000eac <__divmodhi4>:
 eac:	97 fb       	bst	r25, 7
 eae:	07 2e       	mov	r0, r23
 eb0:	16 f4       	brtc	.+4      	; 0xeb6 <__divmodhi4+0xa>
 eb2:	00 94       	com	r0
 eb4:	07 d0       	rcall	.+14     	; 0xec4 <__divmodhi4_neg1>
 eb6:	77 fd       	sbrc	r23, 7
 eb8:	09 d0       	rcall	.+18     	; 0xecc <__divmodhi4_neg2>
 eba:	0e 94 ac 07 	call	0xf58	; 0xf58 <__udivmodhi4>
 ebe:	07 fc       	sbrc	r0, 7
 ec0:	05 d0       	rcall	.+10     	; 0xecc <__divmodhi4_neg2>
 ec2:	3e f4       	brtc	.+14     	; 0xed2 <__divmodhi4_exit>

00000ec4 <__divmodhi4_neg1>:
 ec4:	90 95       	com	r25
 ec6:	81 95       	neg	r24
 ec8:	9f 4f       	sbci	r25, 0xFF	; 255
 eca:	08 95       	ret

00000ecc <__divmodhi4_neg2>:
 ecc:	70 95       	com	r23
 ece:	61 95       	neg	r22
 ed0:	7f 4f       	sbci	r23, 0xFF	; 255

00000ed2 <__divmodhi4_exit>:
 ed2:	08 95       	ret

00000ed4 <__udivmodsi4>:
 ed4:	a1 e2       	ldi	r26, 0x21	; 33
 ed6:	1a 2e       	mov	r1, r26
 ed8:	aa 1b       	sub	r26, r26
 eda:	bb 1b       	sub	r27, r27
 edc:	fd 01       	movw	r30, r26
 ede:	0d c0       	rjmp	.+26     	; 0xefa <__udivmodsi4_ep>

00000ee0 <__udivmodsi4_loop>:
 ee0:	aa 1f       	adc	r26, r26
 ee2:	bb 1f       	adc	r27, r27
 ee4:	ee 1f       	adc	r30, r30
 ee6:	ff 1f       	adc	r31, r31
 ee8:	a2 17       	cp	r26, r18
 eea:	b3 07       	cpc	r27, r19
 eec:	e4 07       	cpc	r30, r20
 eee:	f5 07       	cpc	r31, r21
 ef0:	20 f0       	brcs	.+8      	; 0xefa <__udivmodsi4_ep>
 ef2:	a2 1b       	sub	r26, r18
 ef4:	b3 0b       	sbc	r27, r19
 ef6:	e4 0b       	sbc	r30, r20
 ef8:	f5 0b       	sbc	r31, r21

00000efa <__udivmodsi4_ep>:
 efa:	66 1f       	adc	r22, r22
 efc:	77 1f       	adc	r23, r23
 efe:	88 1f       	adc	r24, r24
 f00:	99 1f       	adc	r25, r25
 f02:	1a 94       	dec	r1
 f04:	69 f7       	brne	.-38     	; 0xee0 <__udivmodsi4_loop>
 f06:	60 95       	com	r22
 f08:	70 95       	com	r23
 f0a:	80 95       	com	r24
 f0c:	90 95       	com	r25
 f0e:	9b 01       	movw	r18, r22
 f10:	ac 01       	movw	r20, r24
 f12:	bd 01       	movw	r22, r26
 f14:	cf 01       	movw	r24, r30
 f16:	08 95       	ret

00000f18 <__tablejump2__>:
 f18:	ee 0f       	add	r30, r30
 f1a:	ff 1f       	adc	r31, r31
 f1c:	05 90       	lpm	r0, Z+
 f1e:	f4 91       	lpm	r31, Z
 f20:	e0 2d       	mov	r30, r0
 f22:	09 94       	ijmp

00000f24 <__umulhisi3>:
 f24:	a2 9f       	mul	r26, r18
 f26:	b0 01       	movw	r22, r0
 f28:	b3 9f       	mul	r27, r19
 f2a:	c0 01       	movw	r24, r0
 f2c:	a3 9f       	mul	r26, r19
 f2e:	70 0d       	add	r23, r0
 f30:	81 1d       	adc	r24, r1
 f32:	11 24       	eor	r1, r1
 f34:	91 1d       	adc	r25, r1
 f36:	b2 9f       	mul	r27, r18
 f38:	70 0d       	add	r23, r0
 f3a:	81 1d       	adc	r24, r1
 f3c:	11 24       	eor	r1, r1
 f3e:	91 1d       	adc	r25, r1
 f40:	08 95       	ret

00000f42 <__muluhisi3>:
 f42:	0e 94 92 07 	call	0xf24	; 0xf24 <__umulhisi3>
 f46:	a5 9f       	mul	r26, r21
 f48:	90 0d       	add	r25, r0
 f4a:	b4 9f       	mul	r27, r20
 f4c:	90 0d       	add	r25, r0
 f4e:	a4 9f       	mul	r26, r20
 f50:	80 0d       	add	r24, r0
 f52:	91 1d       	adc	r25, r1
 f54:	11 24       	eor	r1, r1
 f56:	08 95       	ret

00000f58 <__udivmodhi4>:
 f58:	aa 1b       	sub	r26, r26
 f5a:	bb 1b       	sub	r27, r27
 f5c:	51 e1       	ldi	r21, 0x11	; 17
 f5e:	07 c0       	rjmp	.+14     	; 0xf6e <__udivmodhi4_ep>

00000f60 <__udivmodhi4_loop>:
 f60:	aa 1f       	adc	r26, r26
 f62:	bb 1f       	adc	r27, r27
 f64:	a6 17       	cp	r26, r22
 f66:	b7 07       	cpc	r27, r23
 f68:	10 f0       	brcs	.+4      	; 0xf6e <__udivmodhi4_ep>
 f6a:	a6 1b       	sub	r26, r22
 f6c:	b7 0b       	sbc	r27, r23

00000f6e <__udivmodhi4_ep>:
 f6e:	88 1f       	adc	r24, r24
 f70:	99 1f       	adc	r25, r25
 f72:	5a 95       	dec	r21
 f74:	a9 f7       	brne	.-22     	; 0xf60 <__udivmodhi4_loop>
 f76:	80 95       	com	r24
 f78:	90 95       	com	r25
 f7a:	bc 01       	movw	r22, r24
 f7c:	cd 01       	movw	r24, r26
 f7e:	08 95       	ret

00000f80 <_exit>:
 f80:	f8 94       	cli

00000f82 <__stop_program>:
 f82:	ff cf       	rjmp	.-2      	; 0xf82 <__stop_program>
